@model EduFeedback.Models.CoursePurchaseModel


<style>
    /**
    * The CSS shown here will not be introduced in the Quickstart guide, but shows
    * how you can use CSS to style your Element's container.
    */
    .StripeElement {
        box-sizing: border-box;
        height: 40px;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        background-color: white;
        box-shadow: 0 1px 3px 0 #e6ebf1;
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }
</style>

<script src="https://js.stripe.com/v3/"></script>
<script src="~/Bundle/js/Datatable/jquery-1.12.3.js" type="text/javascript"></script>
<script>

    $(document).ready(function () {
        debugger;
        // Create a Stripe client.
        var stripe = Stripe('@Model.Strip_PK_Key');
        //alert('hi1')
        // Create an instance of Elements.
        var elements = stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        // (Note that this demo uses a wider set of styles than the guide below.)
        var style = {
            base: {
                color: '#32325d',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        // Create an instance of the card Element.
        var card = elements.create('card', { style: style });

        // Add an instance of the card Element into the `card-element` <div>.
        card.mount('#card-element');

        // Handle real-time validation errors from the card Element.
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                displayError.textContent = event.error.message;
            } else {
                displayError.textContent = '';
            }
        });

        // Handle form submission.
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', async function (event) {
            debugger;
            //alert('hi2');
            event.preventDefault();
            alert('Payment testing');

            // Fetch the client secret from the server
            const response = await fetch('/Home/CreatePaymentIntent', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
            });



            // Get the PaymentIntent client secret from your server
            const { clientSecret } = await response.json();  // Replace this with your actual client secret

            // Confirm the card payment
            const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
                payment_method: {
                    card: card,
                    billing_details: {
                        name: 'Testing Cardholder Name',
                    },
                }
            });




            if(error) {
                // Inform the user if there was an error.
                var errorElement = document.getElementById('card-errors');
                errorElement.textContent = error.message;
                alert(error.message);
            } else if(paymentIntent.status === 'succeeded') {
                // Show a success message to your customer.
                alert('Payment succeeded!');
            }



            //stripe.createToken(card).then(function (result) {
            //    if (result.error) {
            //        // Inform the user if there was an error.
            //        var errorElement = document.getElementById('card-errors');
            //        errorElement.textContent = result.error.message;
            //    } else {
            //        // Send the token to your server.
            //        stripeTokenHandler(result.token);
            //    }
            //});



        });
    });

    // Submit the form with the token ID.
    function stripeTokenHandler(token) {
        //alert('hi3')
        $('.modalWait').show();
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        //var hiddenInput = document.createElement('input');
        //hiddenInput.setAttribute('type', 'hidden');
        //hiddenInput.setAttribute('name', 'stripeToken');
        //hiddenInput.setAttribute('value', token.id);
        //form.appendChild(hiddenInput);
        document.getElementById('TokenID').setAttribute('value', token.id);

        // Submit the form
        form.submit();
    }
</script>

<main id="main">
    <section id="contact" class="section-bg wow fadeInUp mt-5">
        <div class="container">
            <div class="paymentDetail pt-4">
                <div class="row">
                    <div class="col-md-6 offset-md-3">
                        <div class="card">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col-md-auto">
                                        <div class="imgIcon"><img src="~/Bundle/img/Make-a-payment.png" alt="" /></div>
                                    </div>
                                    <div class="col">
                                        <h5>Payment</h5>
                                        <h6>Pay with Credit or Debit Card</h6>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                @using (Html.BeginForm("Charge", "Stripe", FormMethod.Post, new { id = "payment-form", enctype = "multipart/form-data" }))
                                {
                                    @Html.HiddenFor(m => m.TokenID);
                                    @Html.HiddenFor(m => m.Course_ID);
                                    @Html.HiddenFor(m => m.Course_Name);
                                    @Html.HiddenFor(m => m.Course_Fee);

                                    @Html.HiddenFor(m => m.Log_ID);
                                    @Html.HiddenFor(m => m.Parent_ID);

                                    @Html.HiddenFor(m => m.Email);
                                    @Html.HiddenFor(m => m.CardName);
                                    @Html.HiddenFor(m => m.TotalAmount);
                                    @Html.HiddenFor(m => m.Product_ID)
                                    @Html.HiddenFor(m => m.Year_ID)

                                    @*@Html.HiddenFor(m => m.PackQuantity)
                                    @Html.HiddenFor(m => m.IsPromoApplied)
                                    @Html.HiddenFor(m => m.PurchasePromoCode)*@

                                    <div class="p-2 bg-light mb-3 text-center">@Model.Course_Name</div>
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Email</label>
                                        @*<input type="email" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Enter email">*@
                                        @Html.TextBoxFor(model => model.Email, new { @class = "effectInput", autocomplete = "off", type = "text", placeholder = "" })
                                        <!--<small id="emailHelp" class="form-text text-danger">We'll never share your email with anyone else.</small>-->
                                    </div>
                                    <div class="form-group">
                                        <label for="exampleInputPassword1">Name on the card</label>
                                        @*<input type="text" class="form-control" id="exampleInputPassword1" placeholder="Enter Name">*@
                                        @Html.TextBoxFor(model => model.CardName, new { @class = "effectInput", autocomplete = "off", type = "text", placeholder = "" })
                                    </div>
                                    <div class="form-group">
                                        <label for="card-element"> Credit or debit card </label>
                                        <div id="card-element">
                                            <!-- A Stripe Element will be inserted here. -->
                                        </div>

                                        <!-- Used to display form errors. -->
                                        <div id="card-errors" role="alert"></div>
                                    </div>
                                    <div class="row">
                                        <div class="col text-center">
                                            <button class="btn btn-primary">Pay <span class="price"><span class="pound">&pound</span> @Html.Raw(@Model.Course_Fee)</span></button>
                                            <button class="btn btn-secondary" onclick="history.go(-1)">Cancel</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>

