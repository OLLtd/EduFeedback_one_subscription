@model  EduFeedback.Core.Models.CheckoutViewModel
@{
    ViewBag.Title = "Checkout";
    Layout = "~/Views/Shared/_Layout_Services.cshtml";
}


<h2>Checkout</h2>

<style>
    /**
    * The CSS shown here will not be introduced in the Quickstart guide, but shows
    * how you can use CSS to style your Element's container.
    */
    .StripeElement {
        box-sizing: border-box;
        height: 40px;
        padding: 10px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        background-color: white;
        box-shadow: 0 1px 3px 0 #e6ebf1;
        -webkit-transition: box-shadow 150ms ease;
        transition: box-shadow 150ms ease;
    }

    .StripeElement--focus {
        box-shadow: 0 1px 3px 0 #cfd7df;
    }

    .StripeElement--invalid {
        border-color: #fa755a;
    }

    .StripeElement--webkit-autofill {
        background-color: #fefde5 !important;
    }
</style>

<script src="https://js.stripe.com/v3/"></script>
<script src="~/Bundle/js/Datatable/jquery-1.12.3.js" type="text/javascript"></script>
<body>

    <script>

    $(document).ready(function () {
        debugger;
        // Create a Stripe client.
        var stripe = Stripe('@Model.Strip_PK_Key');
        //alert('hi1')
        // Create an instance of Elements.
        var elements = stripe.elements();

        // Custom styling can be passed to options when creating an Element.
        // (Note that this demo uses a wider set of styles than the guide below.)
        var style = {
            base: {
                color: '#32325d',
                fontFamily: '"Helvetica Neue", Helvetica, sans-serif',
                fontSmoothing: 'antialiased',
                fontSize: '16px',
                '::placeholder': {
                    color: '#aab7c4'
                }
            },
            invalid: {
                color: '#fa755a',
                iconColor: '#fa755a'
            }
        };

        // Create an instance of the card Element.
        var card = elements.create('card', { style: style });

        // Add an instance of the card Element into the `card-element` <div>.
        card.mount('#card-element');

        //// Handle real-time validation errors from the card Element.
        card.addEventListener('change', function (event) {
            var displayError = document.getElementById('card-errors');
            if (event.error) {
                //alert(event.error);
                displayError.textContent = event.error.message;
            } else {
                //alert("no error");
                displayError.textContent = '';
            }
        });


        //$.ajax({
        //    url: '/Cart/AttachPaymentMothod',
        //    type: "GET",
        //    dataType: "JSON",
        //    async: true,
        //    data: { customerId: "customer id", paymentMethodId: "paymentMethod.id" },
        //    success: function () {

        //    }
        //});



        // Handle form submission.
        var form = document.getElementById('payment-form');
        form.addEventListener('submit', async function (event) {
            debugger;
            //alert('hi2');
            event.preventDefault();

             // Get the PaymentIntent client secret from your server
             const clientSecret = document.getElementById('ClientSecret').value;
/*
            // create payment method

            // Create a payment method
            const { paymentMethod, error: paymentMethodError } = await stripe.createPaymentMethod({
                type: 'card',
                card: card,
                billing_details: {
                    name: document.getElementById('CardName').value,
                },
            });

            if (paymentMethodError) {
                // Display error.message in your UI.
                document.getElementById('card-errors').textContent = paymentMethodError.message;
                return;
            }
            else {

                //$.ajax({
                //    url: '/Cart/AttachPaymentMothod',
                //    type: "GET",
                //    dataType: "JSON",
                //    async: true,
                //    data: { customerId: document.getElementById('CustomerId').value, paymentMethodId: paymentMethod.id },
                //    success: function () {

                //    }
                //});
            }
            ====================================
            alert("paymentMethod.id===>" + paymentMethod.id);*/

             // Confirm the card payment
            const { paymentIntent, error } = await stripe.confirmCardPayment(clientSecret, {

               payment_method:  {
                     card: card,
                     billing_details: {
                         name: document.getElementById('CardName').value,
                         email: document.getElementById('Email').value,
                         address: {
                             line1: "",
                         },
                     },
                },
             });

            if (error) {
                // Display error.message in your UI.
                document.getElementById('error-message').textContent = error.message;
            }
            else {
                // The payment has been processed!
                if (paymentIntent.status === 'succeeded') {

                    //alert("clientSecret = " + clientSecret + " \n PayentIntent==" + paymentIntent.payment_method);
                    debugger;
                    console.log(paymentIntent);

                    // Show a success message to your customer.
                    stripeTokenHandler(paymentIntent);


                }
            }

            ////alert('Payment testing');

            //// Fetch the client secret from the server
            //const response = await fetch('/CreatePaymentIntent', {
            //    method: 'POST',
            //    headers: {
            //        'Content-Type': 'application/json',
            //    },
            //});



            //// Get the PaymentIntent client secret from your server
            //const { clientSecret } = await response.json();  // Replace this with your actual client secret

            //// Confirm the card payment
            //const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {
            //    payment_method: {
            //        card: card,
            //        billing_details: {
            //            name: 'Testing Cardholder Name',
            //        },
            //    }
            //});




            //if (error) {
            //    // Inform the user if there was an error.
            //    var errorElement = document.getElementById('card-errors');
            //    errorElement.textContent = error.message;
            //    alert(error.message);
            //} else if (paymentIntent.status === 'succeeded') {
            //    // Show a success message to your customer.
            //           stripeTokenHandler(result.token);
            //    alert('Payment succeeded!');
            //}

            //stripe.createToken(card).then(function (result) {
            //    if (result.error) {
            //        // Inform the user if there was an error.
            //        var errorElement = document.getElementById('card-errors');
            //        errorElement.textContent = result.error.message;
            //    } else {
            //        // Send the token to your server.
            //        stripeTokenHandler(result.token);
            //    }
            //});


        });
    });

    // Submit the form with the token ID.
        function stripeTokenHandler(paymentIntent) {
            //alert("PayentIntent==" + paymentIntent);

        //alert('hi3')
        $('.modalWait').show();
        // Insert the token ID into the form so it gets submitted to the server
        var form = document.getElementById('payment-form');
        //var hiddenInput = document.createElement('input');
        //hiddenInput.setAttribute('type', 'hidden');
        //hiddenInput.setAttribute('name', 'stripeToken');
        //hiddenInput.setAttribute('value', token.id);
            //form.appendChild(hiddenInput);

            document.getElementById('IntentId').setAttribute('value', paymentIntent.id);
            document.getElementById('PaymentMethodId').setAttribute('value', paymentIntent.payment_method);

        // Submit the form
        form.submit();
    }
    </script>

</body>

<main id="main">
    <section id="contact" class="section-bg wow fadeInUp mt-5">
        <div class="container">
            <div class="paymentDetail pt-4">
                <div class="row">
                    <div class="col-md-6 offset-md-3">
                        <div class="card">
                            <div class="card-header">
                                <div class="row">
                                    <div class="col-md-auto">
                                        <div class="imgIcon"><img src="~/Bundle/img/Make-a-payment.png" alt="" /></div>
                                    </div>
                                    <div class="col">
                                        <h5>Payment</h5>
                                        <h6>Pay with Credit or Debit Card</h6>
                                    </div>
                                </div>
                            </div>
                            <div class="card-body">
                                @using (Html.BeginForm("Charge", "Stripe", FormMethod.Post, new { id = "payment-form", enctype = "multipart/form-data" }))
                                {
                                    @Html.HiddenFor(m => m.TokenID);
                                    @Html.HiddenFor(m => m.PaymentMethodId);
                                    @Html.HiddenFor(m => m.CustomerId);
                                    @Html.HiddenFor(m => m.MultiPurchase_ID);
                                    @Html.HiddenFor(m => m.Parent_ID);
                                    @Html.HiddenFor(m => m.Parent_Name);
                                    @Html.HiddenFor(m => m.ClientSecret);
                                    @Html.HiddenFor(m => m.SubscriptionId);
                                    @Html.HiddenFor(m => m.IntentId);
                                    @Html.HiddenFor(m => m.InvoiceId);


                                    <div class="p-2 bg-light mb-3 text-center">Total Papers in Cart @Model.TotalProductInCart</div>
                                    <div class="form-group">
                                        <label for="exampleInputEmail1">Email</label>

                                        @Html.TextBoxFor(model => model.Email, new { @class = "effectInput DisabledField form-control", autocomplete = "off", type = "text", placeholder = "", @readonly = "readonly" })

                                    </div>
                                    <div class="form-group">
                                        <label for="Name-oncard">Name on the card</label>
                                        @Html.TextBoxFor(model => model.CardName, new { @class = "effectInput form-control", autocomplete = "off", type = "text", placeholder = "" })
                                    </div>
                                    <div class="form-group">
                                        <label for="card-element"> Credit or debit card </label>
                                        <div id="card-element">
                                            <!-- A Stripe Element will be inserted here. -->
                                        </div>

                                        <!-- Used to display form errors. -->
                                        <div id="card-errors" role="alert"></div>
                                    </div>
                                    <div class="row">
                                        <div class="col text-center">
                                            <button class="btn btn-primary">Pay <span class="price"><span class="pound">&pound</span> @Html.Raw(Math.Round(@Model.TotalPrice, 2))</span></button>
                                            <button class="btn btn-secondary" onclick="history.go(-1)">Cancel</button>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>
</main>



